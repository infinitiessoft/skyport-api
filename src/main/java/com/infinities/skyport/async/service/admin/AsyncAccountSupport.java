/*******************************************************************************
 * Copyright 2015 InfinitiesSoft Solutions Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may obtain
 * a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 *******************************************************************************/
package com.infinities.skyport.async.service.admin;

import javax.annotation.Nonnull;

import org.dasein.cloud.AccessControlledService;
import org.dasein.cloud.CloudException;
import org.dasein.cloud.InternalException;
import org.dasein.cloud.admin.Account;
import org.dasein.cloud.admin.AccountCapabilities;
import org.dasein.cloud.identity.ServiceAction;

import com.infinities.skyport.async.AsyncResult;

public interface AsyncAccountSupport extends AccessControlledService {

	static public final ServiceAction ANY = new ServiceAction("ACCT:ANY");

	static public final ServiceAction CREATE_ACCOUNT = new ServiceAction("ACCT:CREATE_ACCOUNT");
	static public final ServiceAction LIST_TIMEZONES = new ServiceAction("ACCT:LIST_TIMEZONES");
	static public final ServiceAction DELETE_ACCOUNT = new ServiceAction("ACCT:DELETE_ACCOUNT");
	static public final ServiceAction LIST_ACCOUNTS = new ServiceAction("ACCT:LIST_ACCOUNTS");
	static public final ServiceAction GET_ACCOUNT = new ServiceAction("ACCT:GET_ACCOUNT");
	static public final ServiceAction ENABLE_ACCOUNT = new ServiceAction("ACCT:ENABLE_ACCOUNT");
	static public final ServiceAction SUSPEND_ACCOUNT = new ServiceAction("ACCT:SUSPEND_ACCOUNT");
	static public final ServiceAction UPDATE_ACCOUNT = new ServiceAction("ACCT:UPDATE_ACCOUNT");


	/**
	 * Provides access to meta-data about account capabilities in the current
	 * region of this cloud.
	 * 
	 * @return a description of the features supported for accounts within this
	 *         cloud
	 * @throws InternalException
	 *             an error occurred within the Dasein Cloud API implementation
	 * @throws CloudException
	 *             an error occurred within the cloud provider
	 */
	public @Nonnull AccountCapabilities getCapabilities() throws InternalException, CloudException;

	/**
	 * Creates a brand new sub account in the cloud given the supplied data. In
	 * some clouds, a unique identifier can be provided as input. Regardless of
	 * this, it is expected that the method return the unique identifier for the
	 * account whether it was passed in or auto-generated by the cloud.
	 * 
	 * @param account
	 *            the data to be used when creating the account
	 * @return the cloud identifier for the newly created account
	 * @throws InternalException
	 *             an error occurred within the Dasein Cloud API implementation
	 * @throws CloudException
	 *             an error occurred within the cloud provider
	 */
	public AsyncResult<String> create(Account account) throws InternalException, CloudException;

	/**
	 * Provides a list of acceptable time zones for the cloud to be used in
	 * creating accounts.
	 * 
	 * @return all acceptable time zones for the cloud
	 * @throws InternalException
	 *             an error occurred within the Dasein Cloud API implementation
	 * @throws CloudException
	 *             an error occurred within the cloud provider
	 */
	public AsyncResult<Iterable<String>> listTimeZones() throws InternalException, CloudException;

	/**
	 * DELETES the specified account. Any and all resources associated with the
	 * account will be destroyed and it will no longer be usable. This is a very
	 * dangerous operation.
	 * 
	 * @param accountId
	 *            the account to be deleted
	 * @throws InternalException
	 *             an error occurred within the Dasein Cloud API implementation
	 * @throws CloudException
	 *             an error occurred within the cloud provider
	 */
	public AsyncResult<Void> delete(String accountId) throws InternalException, CloudException;

	/**
	 * Provides a list of all accounts in the hierachy for which the current
	 * user is authorized.
	 * 
	 * @return all accounts within the hierarchy of the current user
	 * @throws InternalException
	 *             an error occurred within the Dasein Cloud API implementation
	 * @throws CloudException
	 *             an error occurred within the cloud provider
	 */
	public AsyncResult<Iterable<Account>> listAccounts() throws InternalException, CloudException;

	/**
	 * Provides the data for a specific account.
	 * 
	 * @return details for the given account
	 * @throws InternalException
	 *             an error occurred within the Dasein Cloud API implementation
	 * @throws CloudException
	 *             an error occurred within the cloud provider
	 */
	public AsyncResult<Account> getAccount(String accountId) throws InternalException, CloudException;

	/**
	 * 
	 * @param accountId
	 * @throws InternalException
	 *             an error occurred within the Dasein Cloud API implementation
	 * @throws CloudException
	 *             an error occurred within the cloud provider
	 */
	public AsyncResult<Void> enable(String accountId) throws InternalException, CloudException;

	/**
	 * @param accountId
	 * @throws InternalException
	 *             an error occurred within the Dasein Cloud API implementation
	 * @throws CloudException
	 *             an error occurred within the cloud provider
	 */
	public AsyncResult<Void> suspend(String accountId) throws InternalException, CloudException;

	/**
	 * Updates the given account with the provided data. Few clouds will support
	 * all possible changes.
	 * 
	 * @param account
	 *            the data to update the account with
	 * @throws InternalException
	 *             an error occurred within the Dasein Cloud API implementation
	 * @throws CloudException
	 *             an error occurred within the cloud provider
	 */
	public AsyncResult<Void> update(Account account) throws InternalException, CloudException;

}
